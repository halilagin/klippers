/* tslint:disable */
/* eslint-disable */
/**
 * OXSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  MessageResponse,
  User,
  UserCreate,
  UserDelete,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MessageResponseFromJSON,
    MessageResponseToJSON,
    UserFromJSON,
    UserToJSON,
    UserDeleteFromJSON,
    UserDeleteToJSON,
} from '../models/index';
import { UserCreateToJSON } from '../models/UserCreate';

export interface CreateUserApiV1UsersPostRequest {
    userCreate: UserCreate;
}

export interface DeleteUserApiV1UsersDeletePostRequest {
    userDelete: UserDelete;
}

export interface ReadUsersApiV1UsersGetRequest {
    skip?: number;
    limit?: number;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Create User
     */
    async createUserApiV1UsersPostRaw(requestParameters: CreateUserApiV1UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['userCreate'] == null) {
            throw new runtime.RequiredError(
                'userCreate',
                'Required parameter "userCreate" was null or undefined when calling createUserApiV1UsersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateToJSON(requestParameters['userCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Create User
     */
    async createUserApiV1UsersPost(requestParameters: CreateUserApiV1UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.createUserApiV1UsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete User
     */
    async deleteUserApiV1UsersDeletePostRaw(requestParameters: DeleteUserApiV1UsersDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters['userDelete'] == null) {
            throw new runtime.RequiredError(
                'userDelete',
                'Required parameter "userDelete" was null or undefined when calling deleteUserApiV1UsersDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserDeleteToJSON(requestParameters['userDelete']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     * Delete User
     */
    async deleteUserApiV1UsersDeletePost(requestParameters: DeleteUserApiV1UsersDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.deleteUserApiV1UsersDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Users
     */
    async readUsersApiV1UsersGetRaw(requestParameters: ReadUsersApiV1UsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * Read Users
     */
    async readUsersApiV1UsersGet(requestParameters: ReadUsersApiV1UsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.readUsersApiV1UsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Users Me
     */
    async readUsersMeApiV1UsersMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/users/me/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Read Users Me
     */
    async readUsersMeApiV1UsersMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.readUsersMeApiV1UsersMeGetRaw(initOverrides);
        return await response.value();
    }

}
