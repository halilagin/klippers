/* tslint:disable */
/* eslint-disable */
/**
 * OXSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost,
  BodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost,
  BodyCreateSignerApiV1DocumentsDocumentIdSignersPost,
  BodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost,
  BodyUpdateDocumentApiV1DocumentsDocumentIdPost,
  BodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut,
  Document,
  HTTPValidationError,
  MessageResponse,
  PDFFileBase64,
  SignatureAudit,
  SignatureInPDF,
  Signer,
  SigningSession,
} from '../models/index';
import {
    BodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPostFromJSON,
    BodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPostToJSON,
    BodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPostFromJSON,
    BodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPostToJSON,
    BodyCreateSignerApiV1DocumentsDocumentIdSignersPostFromJSON,
    BodyCreateSignerApiV1DocumentsDocumentIdSignersPostToJSON,
    BodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPostFromJSON,
    BodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPostToJSON,
    BodyUpdateDocumentApiV1DocumentsDocumentIdPostFromJSON,
    BodyUpdateDocumentApiV1DocumentsDocumentIdPostToJSON,
    BodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPutFromJSON,
    BodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPutToJSON,
    DocumentFromJSON,
    DocumentToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MessageResponseFromJSON,
    MessageResponseToJSON,
    PDFFileBase64FromJSON,
    PDFFileBase64ToJSON,
    SignatureAuditFromJSON,
    SignatureAuditToJSON,
    SignatureInPDFFromJSON,
    SignatureInPDFToJSON,
    SignerFromJSON,
    SignerToJSON,
    SigningSessionFromJSON,
    SigningSessionToJSON,
} from '../models/index';

export interface AddPdfFileApiV1DocumentsDocumentIdPdfPostRequest {
    documentId: string;
    pDFFileBase64: PDFFileBase64;
}

export interface AddPdfFileApiV1DocumentsDocumentIdPdfPost0Request {
    documentId: string;
    pDFFileBase64: PDFFileBase64;
}

export interface CheckAllSignedApiV1DocumentsDocumentIdCheckAllSignedGetRequest {
    documentId: string;
}

export interface CheckAllSignedApiV1DocumentsDocumentIdCheckAllSignedGet0Request {
    documentId: string;
}

export interface CreateDocumentApiV1DocumentsPostRequest {
    title: string;
    pdfFile: Blob;
    createdBy: string;
    status?: string;
}

export interface CreateDocumentApiV1DocumentsPost0Request {
    title: string;
    pdfFile: Blob;
    createdBy: string;
    status?: string;
}

export interface CreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPostRequest {
    documentId: string;
    bodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost: BodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost;
}

export interface CreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost0Request {
    documentId: string;
    bodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost: BodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost;
}

export interface CreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPostRequest {
    pdfFileId: string;
    bodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost: BodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost;
}

export interface CreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost0Request {
    pdfFileId: string;
    bodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost: BodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost;
}

export interface CreateSignerApiV1DocumentsDocumentIdSignersPostRequest {
    documentId: string;
    bodyCreateSignerApiV1DocumentsDocumentIdSignersPost: BodyCreateSignerApiV1DocumentsDocumentIdSignersPost;
}

export interface CreateSignerApiV1DocumentsDocumentIdSignersPost0Request {
    documentId: string;
    bodyCreateSignerApiV1DocumentsDocumentIdSignersPost: BodyCreateSignerApiV1DocumentsDocumentIdSignersPost;
}

export interface CreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPostRequest {
    documentId: string;
    bodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost: BodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost;
}

export interface CreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost0Request {
    documentId: string;
    bodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost: BodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost;
}

export interface GetDocumentApiV1DocumentsDocumentIdGetRequest {
    documentId: string;
}

export interface GetDocumentApiV1DocumentsDocumentIdGet0Request {
    documentId: string;
}

export interface GetDocumentPdfFilesApiV1DocumentsDocumentIdPdfFilesGetRequest {
    documentId: string;
}

export interface GetDocumentPdfFilesApiV1DocumentsDocumentIdPdfFilesGet0Request {
    documentId: string;
}

export interface GetSignatureAuditsApiV1DocumentsDocumentIdSignatureAuditsGetRequest {
    documentId: string;
}

export interface GetSignatureAuditsApiV1DocumentsDocumentIdSignatureAuditsGet0Request {
    documentId: string;
}

export interface PlaceSignaturesInPdfApiV1DocumentsDocumentIdPlaceSignaturesPostRequest {
    documentId: string;
}

export interface PlaceSignaturesInPdfApiV1DocumentsDocumentIdPlaceSignaturesPost0Request {
    documentId: string;
}

export interface UpdateDocumentApiV1DocumentsDocumentIdPostRequest {
    documentId: string;
    bodyUpdateDocumentApiV1DocumentsDocumentIdPost?: BodyUpdateDocumentApiV1DocumentsDocumentIdPost;
}

export interface UpdateDocumentApiV1DocumentsDocumentIdPost0Request {
    documentId: string;
    bodyUpdateDocumentApiV1DocumentsDocumentIdPost?: BodyUpdateDocumentApiV1DocumentsDocumentIdPost;
}

export interface UpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPutRequest {
    sessionId: string;
    bodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut: BodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut;
}

export interface UpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut0Request {
    sessionId: string;
    bodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut: BodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut;
}

/**
 * 
 */
export class DocumentsApi extends runtime.BaseAPI {

    /**
     * Add a PDF file to an existing document using base64 encoded data
     * Add PDF to document
     */
    async addPdfFileApiV1DocumentsDocumentIdPdfPostRaw(requestParameters: AddPdfFileApiV1DocumentsDocumentIdPdfPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling addPdfFileApiV1DocumentsDocumentIdPdfPost().'
            );
        }

        if (requestParameters['pDFFileBase64'] == null) {
            throw new runtime.RequiredError(
                'pDFFileBase64',
                'Required parameter "pDFFileBase64" was null or undefined when calling addPdfFileApiV1DocumentsDocumentIdPdfPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/pdf`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PDFFileBase64ToJSON(requestParameters['pDFFileBase64']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     * Add a PDF file to an existing document using base64 encoded data
     * Add PDF to document
     */
    async addPdfFileApiV1DocumentsDocumentIdPdfPost(requestParameters: AddPdfFileApiV1DocumentsDocumentIdPdfPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.addPdfFileApiV1DocumentsDocumentIdPdfPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a PDF file to an existing document using base64 encoded data
     * Add PDF to document
     */
    async addPdfFileApiV1DocumentsDocumentIdPdfPost_1Raw(requestParameters: AddPdfFileApiV1DocumentsDocumentIdPdfPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling addPdfFileApiV1DocumentsDocumentIdPdfPost_1().'
            );
        }

        if (requestParameters['pDFFileBase64'] == null) {
            throw new runtime.RequiredError(
                'pDFFileBase64',
                'Required parameter "pDFFileBase64" was null or undefined when calling addPdfFileApiV1DocumentsDocumentIdPdfPost_1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/pdf`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PDFFileBase64ToJSON(requestParameters['pDFFileBase64']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     * Add a PDF file to an existing document using base64 encoded data
     * Add PDF to document
     */
    async addPdfFileApiV1DocumentsDocumentIdPdfPost_1(requestParameters: AddPdfFileApiV1DocumentsDocumentIdPdfPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.addPdfFileApiV1DocumentsDocumentIdPdfPost_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if all required signers have signed the document
     * Check if all signed
     */
    async checkAllSignedApiV1DocumentsDocumentIdCheckAllSignedGetRaw(requestParameters: CheckAllSignedApiV1DocumentsDocumentIdCheckAllSignedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling checkAllSignedApiV1DocumentsDocumentIdCheckAllSignedGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/check-all-signed`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Check if all required signers have signed the document
     * Check if all signed
     */
    async checkAllSignedApiV1DocumentsDocumentIdCheckAllSignedGet(requestParameters: CheckAllSignedApiV1DocumentsDocumentIdCheckAllSignedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.checkAllSignedApiV1DocumentsDocumentIdCheckAllSignedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if all required signers have signed the document
     * Check if all signed
     */
    async checkAllSignedApiV1DocumentsDocumentIdCheckAllSignedGet_2Raw(requestParameters: CheckAllSignedApiV1DocumentsDocumentIdCheckAllSignedGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling checkAllSignedApiV1DocumentsDocumentIdCheckAllSignedGet_2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/check-all-signed`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Check if all required signers have signed the document
     * Check if all signed
     */
    async checkAllSignedApiV1DocumentsDocumentIdCheckAllSignedGet_2(requestParameters: CheckAllSignedApiV1DocumentsDocumentIdCheckAllSignedGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.checkAllSignedApiV1DocumentsDocumentIdCheckAllSignedGet_2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload a new document with PDF file and create it in the system
     * Create new document
     */
    async createDocumentApiV1DocumentsPostRaw(requestParameters: CreateDocumentApiV1DocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        console.log("requestParameters", requestParameters);
        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling createDocumentApiV1DocumentsPost().'
            );
        }

        if (requestParameters['pdfFile'] == null) {
            throw new runtime.RequiredError(
                'pdfFile',
                'Required parameter "pdfFile" was null or undefined when calling createDocumentApiV1DocumentsPost().'
            );
        }

        if (requestParameters['createdBy'] == null) {
            throw new runtime.RequiredError(
                'createdBy',
                'Required parameter "createdBy" was null or undefined when calling createDocumentApiV1DocumentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['title'] != null) {
            console.log("requestParameters['title']", requestParameters['title']);
            formParams.append('title', requestParameters['title'] as any);
        }

        if (requestParameters['pdfFile'] != null) {
            formParams.append('pdf_file', requestParameters['pdfFile'] as any);
        }

        if (requestParameters['createdBy'] != null) {
            formParams.append('created_by', requestParameters['createdBy'] as any);
        }

        if (requestParameters['status'] != null) {
            formParams.append('status', requestParameters['status'] as any);
        }

        const response = await this.request({
            path: `/api/v1/documents/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Upload a new document with PDF file and create it in the system
     * Create new document
     */
    async createDocumentApiV1DocumentsPost(requestParameters: CreateDocumentApiV1DocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.createDocumentApiV1DocumentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload a new document with PDF file and create it in the system
     * Create new document
     */
    async createDocumentApiV1DocumentsPost_3Raw(requestParameters: CreateDocumentApiV1DocumentsPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling createDocumentApiV1DocumentsPost_3().'
            );
        }

        if (requestParameters['pdfFile'] == null) {
            throw new runtime.RequiredError(
                'pdfFile',
                'Required parameter "pdfFile" was null or undefined when calling createDocumentApiV1DocumentsPost_3().'
            );
        }

        if (requestParameters['createdBy'] == null) {
            throw new runtime.RequiredError(
                'createdBy',
                'Required parameter "createdBy" was null or undefined when calling createDocumentApiV1DocumentsPost_3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['title'] != null) {
            formParams.append('title', requestParameters['title'] as any);
        }

        if (requestParameters['pdfFile'] != null) {
            formParams.append('pdf_file', requestParameters['pdfFile'] as any);
        }

        if (requestParameters['createdBy'] != null) {
            formParams.append('created_by', requestParameters['createdBy'] as any);
        }

        if (requestParameters['status'] != null) {
            formParams.append('status', requestParameters['status'] as any);
        }

        const response = await this.request({
            path: `/api/v1/documents/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Upload a new document with PDF file and create it in the system
     * Create new document
     */
    async createDocumentApiV1DocumentsPost_3(requestParameters: CreateDocumentApiV1DocumentsPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.createDocumentApiV1DocumentsPost_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an audit record for signature-related actions
     * Create signature audit
     */
    async createSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPostRaw(requestParameters: CreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignatureAudit>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling createSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost().'
            );
        }

        if (requestParameters['bodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost'] == null) {
            throw new runtime.RequiredError(
                'bodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost',
                'Required parameter "bodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost" was null or undefined when calling createSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/signature-audits`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPostToJSON(requestParameters['bodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignatureAuditFromJSON(jsonValue));
    }

    /**
     * Create an audit record for signature-related actions
     * Create signature audit
     */
    async createSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost(requestParameters: CreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignatureAudit> {
        const response = await this.createSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an audit record for signature-related actions
     * Create signature audit
     */
    async createSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost_4Raw(requestParameters: CreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignatureAudit>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling createSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost_4().'
            );
        }

        if (requestParameters['bodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost'] == null) {
            throw new runtime.RequiredError(
                'bodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost',
                'Required parameter "bodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost" was null or undefined when calling createSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost_4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/signature-audits`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPostToJSON(requestParameters['bodyCreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignatureAuditFromJSON(jsonValue));
    }

    /**
     * Create an audit record for signature-related actions
     * Create signature audit
     */
    async createSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost_4(requestParameters: CreateSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignatureAudit> {
        const response = await this.createSignatureAuditApiV1DocumentsDocumentIdSignatureAuditsPost_4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Define where a signature should be placed in a PDF
     * Create signature placement
     */
    async createSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPostRaw(requestParameters: CreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignatureInPDF>> {
        if (requestParameters['pdfFileId'] == null) {
            throw new runtime.RequiredError(
                'pdfFileId',
                'Required parameter "pdfFileId" was null or undefined when calling createSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost().'
            );
        }

        if (requestParameters['bodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost'] == null) {
            throw new runtime.RequiredError(
                'bodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost',
                'Required parameter "bodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost" was null or undefined when calling createSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/documents/pdf-files/{pdf_file_id}/signatures`.replace(`{${"pdf_file_id"}}`, encodeURIComponent(String(requestParameters['pdfFileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPostToJSON(requestParameters['bodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignatureInPDFFromJSON(jsonValue));
    }

    /**
     * Define where a signature should be placed in a PDF
     * Create signature placement
     */
    async createSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost(requestParameters: CreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignatureInPDF> {
        const response = await this.createSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Define where a signature should be placed in a PDF
     * Create signature placement
     */
    async createSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost_5Raw(requestParameters: CreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignatureInPDF>> {
        if (requestParameters['pdfFileId'] == null) {
            throw new runtime.RequiredError(
                'pdfFileId',
                'Required parameter "pdfFileId" was null or undefined when calling createSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost_5().'
            );
        }

        if (requestParameters['bodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost'] == null) {
            throw new runtime.RequiredError(
                'bodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost',
                'Required parameter "bodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost" was null or undefined when calling createSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost_5().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/documents/pdf-files/{pdf_file_id}/signatures`.replace(`{${"pdf_file_id"}}`, encodeURIComponent(String(requestParameters['pdfFileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPostToJSON(requestParameters['bodyCreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignatureInPDFFromJSON(jsonValue));
    }

    /**
     * Define where a signature should be placed in a PDF
     * Create signature placement
     */
    async createSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost_5(requestParameters: CreateSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignatureInPDF> {
        const response = await this.createSignatureInPdfApiV1DocumentsPdfFilesPdfFileIdSignaturesPost_5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new signer to a document
     * Add signer
     */
    async createSignerApiV1DocumentsDocumentIdSignersPostRaw(requestParameters: CreateSignerApiV1DocumentsDocumentIdSignersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Signer>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling createSignerApiV1DocumentsDocumentIdSignersPost().'
            );
        }

        if (requestParameters['bodyCreateSignerApiV1DocumentsDocumentIdSignersPost'] == null) {
            throw new runtime.RequiredError(
                'bodyCreateSignerApiV1DocumentsDocumentIdSignersPost',
                'Required parameter "bodyCreateSignerApiV1DocumentsDocumentIdSignersPost" was null or undefined when calling createSignerApiV1DocumentsDocumentIdSignersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/signers`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyCreateSignerApiV1DocumentsDocumentIdSignersPostToJSON(requestParameters['bodyCreateSignerApiV1DocumentsDocumentIdSignersPost']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignerFromJSON(jsonValue));
    }

    /**
     * Add a new signer to a document
     * Add signer
     */
    async createSignerApiV1DocumentsDocumentIdSignersPost(requestParameters: CreateSignerApiV1DocumentsDocumentIdSignersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Signer> {
        const response = await this.createSignerApiV1DocumentsDocumentIdSignersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new signer to a document
     * Add signer
     */
    async createSignerApiV1DocumentsDocumentIdSignersPost_6Raw(requestParameters: CreateSignerApiV1DocumentsDocumentIdSignersPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Signer>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling createSignerApiV1DocumentsDocumentIdSignersPost_6().'
            );
        }

        if (requestParameters['bodyCreateSignerApiV1DocumentsDocumentIdSignersPost'] == null) {
            throw new runtime.RequiredError(
                'bodyCreateSignerApiV1DocumentsDocumentIdSignersPost',
                'Required parameter "bodyCreateSignerApiV1DocumentsDocumentIdSignersPost" was null or undefined when calling createSignerApiV1DocumentsDocumentIdSignersPost_6().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/signers`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyCreateSignerApiV1DocumentsDocumentIdSignersPostToJSON(requestParameters['bodyCreateSignerApiV1DocumentsDocumentIdSignersPost']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignerFromJSON(jsonValue));
    }

    /**
     * Add a new signer to a document
     * Add signer
     */
    async createSignerApiV1DocumentsDocumentIdSignersPost_6(requestParameters: CreateSignerApiV1DocumentsDocumentIdSignersPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Signer> {
        const response = await this.createSignerApiV1DocumentsDocumentIdSignersPost_6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new signing session for a document
     * Create signing session
     */
    async createSigningSessionApiV1DocumentsDocumentIdSigningSessionsPostRaw(requestParameters: CreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SigningSession>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling createSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost().'
            );
        }

        if (requestParameters['bodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost'] == null) {
            throw new runtime.RequiredError(
                'bodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost',
                'Required parameter "bodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost" was null or undefined when calling createSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/signing-sessions`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPostToJSON(requestParameters['bodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SigningSessionFromJSON(jsonValue));
    }

    /**
     * Create a new signing session for a document
     * Create signing session
     */
    async createSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost(requestParameters: CreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SigningSession> {
        const response = await this.createSigningSessionApiV1DocumentsDocumentIdSigningSessionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new signing session for a document
     * Create signing session
     */
    async createSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost_7Raw(requestParameters: CreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SigningSession>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling createSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost_7().'
            );
        }

        if (requestParameters['bodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost'] == null) {
            throw new runtime.RequiredError(
                'bodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost',
                'Required parameter "bodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost" was null or undefined when calling createSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost_7().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/signing-sessions`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPostToJSON(requestParameters['bodyCreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SigningSessionFromJSON(jsonValue));
    }

    /**
     * Create a new signing session for a document
     * Create signing session
     */
    async createSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost_7(requestParameters: CreateSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SigningSession> {
        const response = await this.createSigningSessionApiV1DocumentsDocumentIdSigningSessionsPost_7Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a document by its ID
     * Get document
     */
    async getDocumentApiV1DocumentsDocumentIdGetRaw(requestParameters: GetDocumentApiV1DocumentsDocumentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling getDocumentApiV1DocumentsDocumentIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/documents/{document_id}`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Retrieve a document by its ID
     * Get document
     */
    async getDocumentApiV1DocumentsDocumentIdGet(requestParameters: GetDocumentApiV1DocumentsDocumentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.getDocumentApiV1DocumentsDocumentIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a document by its ID
     * Get document
     */
    async getDocumentApiV1DocumentsDocumentIdGet_8Raw(requestParameters: GetDocumentApiV1DocumentsDocumentIdGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling getDocumentApiV1DocumentsDocumentIdGet_8().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/documents/{document_id}`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Retrieve a document by its ID
     * Get document
     */
    async getDocumentApiV1DocumentsDocumentIdGet_8(requestParameters: GetDocumentApiV1DocumentsDocumentIdGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.getDocumentApiV1DocumentsDocumentIdGet_8Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all PDF files associated with a document
     * Get document PDF files
     */
    async getDocumentPdfFilesApiV1DocumentsDocumentIdPdfFilesGetRaw(requestParameters: GetDocumentPdfFilesApiV1DocumentsDocumentIdPdfFilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PDFFileBase64>>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling getDocumentPdfFilesApiV1DocumentsDocumentIdPdfFilesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/pdf-files`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PDFFileBase64FromJSON));
    }

    /**
     * Retrieve all PDF files associated with a document
     * Get document PDF files
     */
    async getDocumentPdfFilesApiV1DocumentsDocumentIdPdfFilesGet(requestParameters: GetDocumentPdfFilesApiV1DocumentsDocumentIdPdfFilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PDFFileBase64>> {
        const response = await this.getDocumentPdfFilesApiV1DocumentsDocumentIdPdfFilesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all PDF files associated with a document
     * Get document PDF files
     */
    async getDocumentPdfFilesApiV1DocumentsDocumentIdPdfFilesGet_9Raw(requestParameters: GetDocumentPdfFilesApiV1DocumentsDocumentIdPdfFilesGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PDFFileBase64>>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling getDocumentPdfFilesApiV1DocumentsDocumentIdPdfFilesGet_9().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/pdf-files`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PDFFileBase64FromJSON));
    }

    /**
     * Retrieve all PDF files associated with a document
     * Get document PDF files
     */
    async getDocumentPdfFilesApiV1DocumentsDocumentIdPdfFilesGet_9(requestParameters: GetDocumentPdfFilesApiV1DocumentsDocumentIdPdfFilesGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PDFFileBase64>> {
        const response = await this.getDocumentPdfFilesApiV1DocumentsDocumentIdPdfFilesGet_9Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve user documents
     * Get documents
     */
    async getDocumentsApiV1DocumentsListMyDocumentsPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Document>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/documents/list/my-documents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DocumentFromJSON));
    }

    /**
     * Retrieve user documents
     * Get documents
     */
    async getDocumentsApiV1DocumentsListMyDocumentsPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Document>> {
        const response = await this.getDocumentsApiV1DocumentsListMyDocumentsPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve user documents
     * Get documents
     */
    async getDocumentsApiV1DocumentsListMyDocumentsPost_10Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Document>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/documents/list/my-documents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DocumentFromJSON));
    }

    /**
     * Retrieve user documents
     * Get documents
     */
    async getDocumentsApiV1DocumentsListMyDocumentsPost_10(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Document>> {
        const response = await this.getDocumentsApiV1DocumentsListMyDocumentsPost_10Raw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all signature audit records for a document
     * Get signature audits
     */
    async getSignatureAuditsApiV1DocumentsDocumentIdSignatureAuditsGetRaw(requestParameters: GetSignatureAuditsApiV1DocumentsDocumentIdSignatureAuditsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SignatureAudit>>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling getSignatureAuditsApiV1DocumentsDocumentIdSignatureAuditsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/signature-audits`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SignatureAuditFromJSON));
    }

    /**
     * Retrieve all signature audit records for a document
     * Get signature audits
     */
    async getSignatureAuditsApiV1DocumentsDocumentIdSignatureAuditsGet(requestParameters: GetSignatureAuditsApiV1DocumentsDocumentIdSignatureAuditsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SignatureAudit>> {
        const response = await this.getSignatureAuditsApiV1DocumentsDocumentIdSignatureAuditsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all signature audit records for a document
     * Get signature audits
     */
    async getSignatureAuditsApiV1DocumentsDocumentIdSignatureAuditsGet_11Raw(requestParameters: GetSignatureAuditsApiV1DocumentsDocumentIdSignatureAuditsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SignatureAudit>>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling getSignatureAuditsApiV1DocumentsDocumentIdSignatureAuditsGet_11().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/signature-audits`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SignatureAuditFromJSON));
    }

    /**
     * Retrieve all signature audit records for a document
     * Get signature audits
     */
    async getSignatureAuditsApiV1DocumentsDocumentIdSignatureAuditsGet_11(requestParameters: GetSignatureAuditsApiV1DocumentsDocumentIdSignatureAuditsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SignatureAudit>> {
        const response = await this.getSignatureAuditsApiV1DocumentsDocumentIdSignatureAuditsGet_11Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Place all signatures in the PDF and generate the final signed document
     * Place signatures in PDF
     */
    async placeSignaturesInPdfApiV1DocumentsDocumentIdPlaceSignaturesPostRaw(requestParameters: PlaceSignaturesInPdfApiV1DocumentsDocumentIdPlaceSignaturesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling placeSignaturesInPdfApiV1DocumentsDocumentIdPlaceSignaturesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/place-signatures`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Place all signatures in the PDF and generate the final signed document
     * Place signatures in PDF
     */
    async placeSignaturesInPdfApiV1DocumentsDocumentIdPlaceSignaturesPost(requestParameters: PlaceSignaturesInPdfApiV1DocumentsDocumentIdPlaceSignaturesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.placeSignaturesInPdfApiV1DocumentsDocumentIdPlaceSignaturesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Place all signatures in the PDF and generate the final signed document
     * Place signatures in PDF
     */
    async placeSignaturesInPdfApiV1DocumentsDocumentIdPlaceSignaturesPost_12Raw(requestParameters: PlaceSignaturesInPdfApiV1DocumentsDocumentIdPlaceSignaturesPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling placeSignaturesInPdfApiV1DocumentsDocumentIdPlaceSignaturesPost_12().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/documents/{document_id}/place-signatures`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Place all signatures in the PDF and generate the final signed document
     * Place signatures in PDF
     */
    async placeSignaturesInPdfApiV1DocumentsDocumentIdPlaceSignaturesPost_12(requestParameters: PlaceSignaturesInPdfApiV1DocumentsDocumentIdPlaceSignaturesPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.placeSignaturesInPdfApiV1DocumentsDocumentIdPlaceSignaturesPost_12Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update document status and metadata
     * Update document
     */
    async updateDocumentApiV1DocumentsDocumentIdPostRaw(requestParameters: UpdateDocumentApiV1DocumentsDocumentIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling updateDocumentApiV1DocumentsDocumentIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/documents/{document_id}`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyUpdateDocumentApiV1DocumentsDocumentIdPostToJSON(requestParameters['bodyUpdateDocumentApiV1DocumentsDocumentIdPost']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     * Update document status and metadata
     * Update document
     */
    async updateDocumentApiV1DocumentsDocumentIdPost(requestParameters: UpdateDocumentApiV1DocumentsDocumentIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.updateDocumentApiV1DocumentsDocumentIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update document status and metadata
     * Update document
     */
    async updateDocumentApiV1DocumentsDocumentIdPost_13Raw(requestParameters: UpdateDocumentApiV1DocumentsDocumentIdPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling updateDocumentApiV1DocumentsDocumentIdPost_13().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/documents/{document_id}`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyUpdateDocumentApiV1DocumentsDocumentIdPostToJSON(requestParameters['bodyUpdateDocumentApiV1DocumentsDocumentIdPost']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     * Update document status and metadata
     * Update document
     */
    async updateDocumentApiV1DocumentsDocumentIdPost_13(requestParameters: UpdateDocumentApiV1DocumentsDocumentIdPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.updateDocumentApiV1DocumentsDocumentIdPost_13Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the status of a signing session
     * Update signing session
     */
    async updateSigningSessionApiV1DocumentsSigningSessionsSessionIdPutRaw(requestParameters: UpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SigningSession>> {
        if (requestParameters['sessionId'] == null) {
            throw new runtime.RequiredError(
                'sessionId',
                'Required parameter "sessionId" was null or undefined when calling updateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut().'
            );
        }

        if (requestParameters['bodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut'] == null) {
            throw new runtime.RequiredError(
                'bodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut',
                'Required parameter "bodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut" was null or undefined when calling updateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/documents/signing-sessions/{session_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters['sessionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPutToJSON(requestParameters['bodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SigningSessionFromJSON(jsonValue));
    }

    /**
     * Update the status of a signing session
     * Update signing session
     */
    async updateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut(requestParameters: UpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SigningSession> {
        const response = await this.updateSigningSessionApiV1DocumentsSigningSessionsSessionIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the status of a signing session
     * Update signing session
     */
    async updateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut_14Raw(requestParameters: UpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SigningSession>> {
        if (requestParameters['sessionId'] == null) {
            throw new runtime.RequiredError(
                'sessionId',
                'Required parameter "sessionId" was null or undefined when calling updateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut_14().'
            );
        }

        if (requestParameters['bodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut'] == null) {
            throw new runtime.RequiredError(
                'bodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut',
                'Required parameter "bodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut" was null or undefined when calling updateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut_14().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/documents/signing-sessions/{session_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters['sessionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPutToJSON(requestParameters['bodyUpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SigningSessionFromJSON(jsonValue));
    }

    /**
     * Update the status of a signing session
     * Update signing session
     */
    async updateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut_14(requestParameters: UpdateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SigningSession> {
        const response = await this.updateSigningSessionApiV1DocumentsSigningSessionsSessionIdPut_14Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
